import io
import json
import boto3
from PIL import Image, ImageDraw


def lambda_handler(event, context):
    """
    This is the main entry point into the lambda function that does the following:

    1. Creates the necessary connections required to various AWS services.

    2. Reads the event that is pushed by the SQS and deciphers the message which contains the s3 bucket and s3 object
       information.

    3. Uses the image information from S3 to process labels from the image using AWS rekognition.

    4. Creates a text file that contains information about the labels and stores it under processed-data prefix at
       company-x-images s3 bucket.

    5. Creates another image and draws the bounding boxes around it representing the labels in the image and stores it
       in processed-images prefix at company-x-images s3 bucket.

    6. Sends the information to an SNS client like a Monitoring group/ QA test group.

    :param event: this is the information generated by SQS when an object is uploaded to S3.
    :param context: Metadata information
    :return: a status 200 process complete or status 400 process incomplete.
    """
    # Create S3 client
    s3 = boto3.client('s3')

    # Create rekognition client
    rekognition = boto3.client('rekognition')

    # Create sns client
    sns = boto3.client('sns')
    sns_arn = 'arn:aws:sns:us-east-1:404670312311:notify-qa-group'

    try:
        # get the data from event.
        event_tag = event['Records'][0]['body']
        message = json.loads(event_tag)
        # For debugging only.
        # message = event

        # S3 data used for further data processing
        s3_bucket_name = message['Records'][0]['s3']['bucket']['name']
        s3_key = message['Records'][0]['s3']['object']['key']
        object_name = s3_key[s3_key.find('/') + 1:s3_key.find('.')]

        # Rekognition code
        rekognition_response = rekognition.detect_labels(Image={'S3Object': {'Bucket': s3_bucket_name, 'Name': s3_key}},
                                                         MaxLabels=10)

        # call the function that checks if there was exactly one instance of a golden retriever.
        if verify_product_golden_retriever(rekognition_response):
            # call the function to save the data as a text file from the input image
            save_rekognition_data(object_name, rekognition_response, s3, s3_bucket_name)

            # call the function to find labels from image, create a new image and upload it to s3
            add_labels_image(s3_bucket_name, s3_key, rekognition_response, s3, object_name)

            # send the message that the topic has been successfully published
            sns.publish(TopicArn=sns_arn, Message='Verification Successful')

        # Otherwise send an sns that says the process failed
        else:
            # send the message that the topic has been successfully published
            sns.publish(TopicArn=sns_arn, Message='Verification Failed')

        # return positive response
        return {
            "statusCode": 200,
            "body": json.dumps({
                "message": "Lambda Invoked Successfully",
            })
        }

    except:
        # return negative response
        return {
            "statusCode": 400,
            "body": json.dumps({
                "message": "Lambda Invoked Unsuccessfully",
            })
        }


def verify_product_golden_retriever(response):
    ver1 = False
    ver2 = False
    for label in response['Labels']:
        if label['Name'].lower() == 'dog' and len(label['Instances']) == 1:
            ver1 = True
        if label['Name'].lower() == 'golden retriever':
            ver2 = True
        if ver1 and ver2:
            return True
    return False


def save_rekognition_data(object_name, rekognition_response, s3, s3_bucket_name):
    """
    This function takes the labels recognized by AWS rekognition and parses as a readable data, to be stored
    under processed-data prefix at company-x-images s3 bucket.

    :param object_name: The file path of the object in S3.
    :param rekognition_response: Labels created by AWS rekognition.
    :param s3: Reference to the s3 boto3 client.
    :param s3_bucket_name: Name of the bucket where the final output needs to be stored
    :return: Nothing it's a void function.
    """
    # save json to readable format here
    file_name = object_name + '.json'
    file = open('/tmp/' + file_name, 'w')
    file.write(json.dumps(rekognition_response))
    file.close()

    # upload file to s3 processed-images folder
    s3.upload_file("/tmp/" + file_name, s3_bucket_name, Key='processed-data/' + file_name)
    return


def add_labels_image(bucket, photo, response, s3, object_name):
    """
    This function reads the labels sent by AWS rekognition and draws a box around each identified instance. This new
    image formed is saved and stored in processed-images prefix at company-x-images s3 bucket.

    :param bucket: Name of the bucket where the new analyzed image needs to be stored.
    :param photo: the path to the object in S3 bucket.
    :param response: AWS rekognition labels.
    :param s3: Reference to S3 boto3 client.
    :param object_name: name of the file to be used internally to generate the name of the image.
    :return: Nothing it's a void function.
    """
    # name of the file.
    file_name = object_name + '.jpeg'

    # s3 to call the reference object itself
    s3_response = s3.get_object(Bucket=bucket, Key=photo)

    # read the image
    stream = io.BytesIO(s3_response['Body'].read())
    image = Image.open(stream)

    # parameters used internally
    image_width, image_height = image.size
    draw = ImageDraw.Draw(image)

    # calculate and display bounding boxes for each detected custom label
    print('Detected custom labels for ' + photo)
    for labels in response['Labels']:
        print('Label ' + str(labels['Name']))
        print('Confidence ' + str(labels['Confidence']))
        if len(labels['Instances']) > 0:
            for instance in labels['Instances']:
                box = instance['BoundingBox']
                left = image_width * box['Left']
                top = image_height * box['Top']
                width = image_width * box['Width']
                height = image_height * box['Height']

                draw.text((left, top), labels['Name'], fill='#00d400')
                points = (
                    (left, top),
                    (left + width, top),
                    (left + width, top + height),
                    (left, top + height),
                    (left, top))
                draw.line(points, fill='#00d400', width=5)

    # save the image
    image.save('/tmp/' + file_name)

    # upload file to s3 processed-images folder
    s3.upload_file('/tmp/' + file_name, bucket, Key='processed-images/processed_' + file_name)
    return
